<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
				         http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
				         http://www.springframework.org/schema/aop
				         http://www.springframework.org/schema/aop/spring-aop.xsd
						 http://www.springframework.org/schema/tx
						 http://www.springframework.org/schema/tx/spring-tx.xsd
						 http://www.springframework.org/schema/context 
				         http://www.springframework.org/schema/context/spring-context-3.2.xsd
				         http://www.springframework.org/schema/task 
				         http://www.springframework.org/schema/task/spring-task-3.0.xsd
				         "
	xmlns:context="http://www.springframework.org/schema/context">

	<!-- tx -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 配置那些类的方法进行事务管理,需要aopalliance-1.0.jar和aspectjweaver.jar，当前org.meetu.service.impl包中的子包，  
                       类中所有方法需要，还需要参考tx:advice的设置 -->  
    <!-- 需要引入tx的命名空间 -->  
    <!-- 这是事务通知操作，使用的事务管理器引用自 transactionManager -->  
    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
         <!-- 指定哪些方法需要加入事务，这里懒惰一下全部加入，可以使用通配符来只加入需要的方法 -->
         	<!-- -->    
         	<tx:method name="insert*" propagation="REQUIRED" />
            <tx:method name="save*" propagation="REQUIRED" />    
            <tx:method name="update*" propagation="REQUIRED" />  
            <tx:method name="delete*" propagation="REQUIRED" />  
            <tx:method name="select*" propagation="REQUIRED" read-only="true"/>  
            <tx:method name="query*" propagation="REQUIRED" read-only="true"/>
            
            <tx:method name="upload*" propagation="REQUIRED" />
            <tx:method name="push*" propagation="REQUIRED" />
            <tx:method name="meetu*" propagation="REQUIRED" />
            <tx:method name="deal*" propagation="REQUIRED" rollback-for="java.lang.Exception"/>  
        </tx:attributes>  
    </tx:advice>   
    <!-- 需要引入aop的命名空间 -->  
    <aop:config>  
        <!-- 切入点指明了在执行Service的所有方法时产生事务拦截操作 -->  
        <!-- 
        	第一个空格前是说明ret-type-pattern，空格后是说明name-pattern(param-pattern)，具体说明如下：
			第一个*（ret-type-pattern）, 表示任意返回值类型
			第二个和第三个*(name-pattern), 第二个包名通配，第三个方法名通配
			最后二个.. 表示通配方法可以有0个或多个参数
         -->
         <!-- Service层实物控制 -->
        <aop:pointcut id="serviceMethods" expression="execution(* org.meetu.service.impl.*.*(..))" />
        <!-- 定义了将采用何种拦截操作，这里引用到 txAdvice -->  
        <aop:advisor advice-ref="txAdvice" pointcut-ref="serviceMethods" />
    </aop:config> 
    
     
</beans>